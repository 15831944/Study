int转string 
#include <string>
int i=10;
string s=to_string(i);




wchar_t和string 间相相互转换
//不要忘记使用完char*后delete[]释放内存
char* wide_Char_To_Multi_Byte(wchar_t* pWCStrKey)
{
    //第一次调用确认转换后单字节字符串的长度，用于开辟空间
    int pSize = WideCharToMultiByte(CP_OEMCP, 0, pWCStrKey, wcslen(pWCStrKey), NULL, 0, NULL, NULL);
    char* pCStrKey = new char[pSize+1];
    //第二次调用将双字节字符串转换成单字节字符串
    WideCharToMultiByte(CP_OEMCP, 0, pWCStrKey, wcslen(pWCStrKey), pCStrKey, pSize, NULL, NULL);
    pCStrKey[pSize] = '\0';
    return pCStrKey;
 
    //如果想要转换成string，直接赋值即可
    //string pKey = pCStrKey;
}
//不要忘记在使用完wchar_t*后delete[]释放内存
wchar_t* multi_Byte_To_Wide_Char(string pKey)
{
    //string 转 char*
    const char* pCStrKey = pKey.c_str();
    //第一次调用返回转换后的字符串长度，用于确认为wchar_t*开辟多大的内存空间
    int pSize = MultiByteToWideChar(CP_OEMCP, 0, pCStrKey, strlen(pCStrKey) + 1, NULL, 0);
    wchar_t* pWCStrKey = new wchar_t[pSize];
    //第二次调用将单字节字符串转换成双字节字符串
    MultiByteToWideChar(CP_OEMCP, 0, pCStrKey, strlen(pCStrKey) + 1, pWCStrKey, pSize);
    return pWCStrKey;
}



CString类型转换成char*型
char * CStringtochar(CString str)
{    
	char *ptr;    
#ifdef _UNICODE    
	LONG len;    
	len = WideCharToMultiByte(CP_ACP, 0, str, -1, NULL, 0, NULL, NULL);    
	ptr = new char [len+1];    memset(ptr,0,len + 1);    
	WideCharToMultiByte(CP_ACP, 0, str, -1, ptr, len + 1, NULL, NULL);    
#else    
	ptr = new char [str.GetAllocLength()+1];    
	sprintf(ptr,_T("%s"),str);    
#endif    
	return ptr;
}



第一种
CString strTemp;char szTemp[128];
strTemp = _T("abckdkfei");
memset( szTemp, 0, sizeof(szTemp) );
strcpy( szTemp, strTemp.GetBuffer(strTemp.GetLength()) );
第二种：
char * pchar;CString str="hello";pchar=(LPSTR)(LPCSTR)str;
第三种：
char szTemp[500];
CString strTemp = "123456789";
memset(szTemp,0,sizeof(szTemp));
sprintf(szTemp,"%s",strTemp);
第四种：
如果是基于UNICODE的，那么直接强制转换是不行的，直接转换在基于MBCS的工程可以，而在基于UNICODE的工程是不行的，CString会以UNICODE的形式来保存数据，强制类型转换只会返回第一个字符。
方法一：可以用API:WideCharToMultiByte进行转换
方法二：可以添加文件#include <afxpriv.h>然后这样：
CString strTest = _T("abcd");
USES_CONVERSION;
LPSTR lpszTest= T2A(strTest);
第六种
办法比较麻烦，可以试试WideCharToMultiByte，这种方法一般都有效。
CString str;
DWORD dwNum = WideCharToMultiByte(CP_OEMCP,NULL,str,-1,NULL,NULL,0,NULL); 
char *c = new char[dwNum]; 
WideCharToMultiByte(CP_OEMCP,NULL,str,-1,c,dwNum,0,NULL)

extern char* CStringToChar(CString str)
{
    const size_t strsize = (str.GetLength() + 1)*2;
    char* pstr = new char[strsize];
    size_t sz = 0;
    wcstombs_s(&sz, pstr, strsize, str, _TRUNCATE);  //函数功能：将字符串从wchar_t*转换成char*，即从unicode字符转换成多字节字符
    return pstr;
}

//产生两个个随机长度的key字符数组
char * key = test->genRandomString(128);
char * value = test->genRandomString(256);
//DO SOMETHING 对数据进行操作
………………
char temp[1024];
//将字符数组，key，value按照一定的格式要求，连接起来
sprintf(temp,"%s%s%s%s%s%s","Key:",key,"------","Value",value,"插入成功！");
//生成我们需要的CString对象
CString str(temp);


/char* 转CString
//使用Format,下面举个例子

    char* chBuffer = new char[1024];
    CString csInfo(_T(""));
    csInfo.Format(_T("%s", chBuffer);


1 string 转为 CString   

CString.format("%s",string.c_str()); 

2 CString 转为 string

string str(CString.GetBuffer(str.GetLength()));

3 string 转为 char *

char *p=string.c_str();

4 char * 转为 string

string str(char*);

5 CString 转为 char *

strcpy(char,CString,sizeof(char));

6 char * 转为 CString

CString.format("%s",char*);

补充：
CString 可能是 CStringW/CStringA，在与 string 转换时，如果是 CStringW，还涉及编码转换问题。下面以 CStringA 来说明。
 
1 string 转为 CString  

CString.format("%s",string.c_str());
 
CStringA = string.c_str() 就可以了

 
2 CString 转为 string

string str(CString.GetBuffer(str.GetLength()));
 
GetBuffer 有参数的话，可能导致内部的分配空间动作，要进行后续 ReleaseBuffer 操作。

string = CStringA

string = CStringA.GetBuffer();

3 string 转为 char *

char *p=string.c_str();

4 char * 转为 string

string str(char*);

5 CString 转为 char *

strcpy(char *,CString,sizeof(char));

按照 3 风格，这里应该 char *  = CStringA; 或者 char *p = CStringA.GetBuffer();
 
6 char * 转为 CString

CStringA = char * 就可以了