1、下载websocketpp：https://github.com/zaphoyd/websocketpp
2、VS2017新建项目，包含目录包含websocketpp:C:\Program Files (x86)\Microsoft Visual Studio\lib\websocketpp-master
3、NuGget安装:1.boost(v1.68.0),2.boost-vc141(v1.68.1)
4、测试：复制websocketpp-master\examples\debug_client\debug_client.cpp文件，修改网址
5、报错C4996：在程序开头添加：#pragma warning(disable:4996)  



安装vckpg:
1、下载安装包：https://github.com/microsoft/vcpkg
2、解压，运行bootstrap-vcpkg.bat
3、powershell进入目录：


To get started:

> git clone https://github.com/Microsoft/vcpkg.git
> cd vcpkg

PS> .\bootstrap-vcpkg.bat
Ubuntu:~/$ ./bootstrap-vcpkg.sh
Then, to hook up user-wide integration, run (note: requires admin on first use)

PS> .\vcpkg integrate install
Ubuntu:~/$ ./vcpkg integrate install
Install any packages with

PS> .\vcpkg install sdl2 curl
Ubuntu:~/$ ./vcpkg install sdl2 curl


安装记录：
***************************************************************************************

PS C:\Users\SJRJY\Downloads\websocket tools\vcpkg-master> .\vcpkg integrate install
Applied user-wide integration for this vcpkg root.

All MSBuild C++ projects can now #include any installed libraries.
Linking will be handled automatically.
Installing new libraries will make them instantly available.

CMake projects should use: "-DCMAKE_TOOLCHAIN_FILE=C:/Users/SJRJY/Downloads/websocket tools/vcpkg-master/scripts/buildsystems/vcpkg.cmake"
PS C:\Users\SJRJY\Downloads\websocket tools\vcpkg-master>  .\vcpkg install sdl2 curl
The following packages will be built and installed:
    curl[core,ssl]:x86-windows
  * openssl[core]:x86-windows
  * openssl-windows[core]:x86-windows
    sdl2[core]:x86-windows
  * zlib[core]:x86-windows
Additional packages (*) will be modified to complete this operation.
Starting package 1/5: sdl2:x86-windows
Building package sdl2[core]:x86-windows...
A suitable version of cmake was not found (required v3.11.4). Downloading portable cmake v3.11.4...
Downloading cmake...
Downloading cmake... done.
Extracting cmake...
A suitable version of 7zip was not found (required v18.1.0). Downloading portable 7zip v18.1.0...
Downloading 7zip...
Downloading 7zip... done.
Extracting 7zip...
A suitable version of nuget was not found (required v4.6.2). Downloading portable nuget v4.6.2...
Downloading nuget...
Downloading nuget... done.
Extracting 7zip... done.
Extracting cmake... done.
-- Downloading https://github.com/SDL-Mirror/SDL/archive/release-2.0.8.tar.gz...
-- Extracting source C:/Users/SJRJY/Downloads/websocket tools/vcpkg-master/downloads/SDL-Mirror-SDL-release-2.0.8.tar.gz
-- Using source at C:/Users/SJRJY/Downloads/websocket tools/vcpkg-master/buildtrees/sdl2/src/ease-2.0.8-42957b8d01
-- Applying patch C:/Users/SJRJY/Downloads/websocket tools/vcpkg-master/ports/sdl2/export-symbols-only-in-shared-build.patch
-- Applying patch C:/Users/SJRJY/Downloads/websocket tools/vcpkg-master/ports/sdl2/enable-winrt-cmake.patch
-- Applying patch failed. This is expected if this patch was previously applied.
-- Downloading https://github.com/ninja-build/ninja/releases/download/v1.8.2/ninja-win.zip...
-- Configuring x86-windows
-- Building x86-windows-dbg
-- Building x86-windows-rel
-- Installing: C:/Users/SJRJY/Downloads/websocket tools/vcpkg-master/packages/sdl2_x86-windows/share/sdl2/copyright
-- Performing post-build validation
-- Performing post-build validation done
Building package sdl2[core]:x86-windows... done
Installing package sdl2[core]:x86-windows...
Installing package sdl2[core]:x86-windows... done
Elapsed time for package sdl2:x86-windows: 16.01 min
Starting package 2/5: zlib:x86-windows
Building package zlib[core]:x86-windows...
-- Downloading http://www.zlib.net/zlib-1.2.11.tar.gz...
-- Extracting source C:/Users/SJRJY/Downloads/websocket tools/vcpkg-master/downloads/zlib1211.tar.gz
-- Applying patch C:/Users/SJRJY/Downloads/websocket tools/vcpkg-master/ports/zlib/cmake_dont_build_more_than_needed.patch
-- Configuring x86-windows
-- Building x86-windows-dbg
-- Building x86-windows-rel
-- Installing: C:/Users/SJRJY/Downloads/websocket tools/vcpkg-master/packages/zlib_x86-windows/share/zlib/copyright
-- Performing post-build validation
-- Performing post-build validation done
Building package zlib[core]:x86-windows... done
Installing package zlib[core]:x86-windows...
Installing package zlib[core]:x86-windows... done
Elapsed time for package zlib:x86-windows: 1.021 min
Starting package 3/5: openssl-windows:x86-windows
Building package openssl-windows[core]:x86-windows...
-- Downloading http://strawberryperl.com/download/5.24.1.1/strawberry-perl-5.24.1.1-32bit-portable.zip...
-- Downloading https://www.openssl.org/source/openssl-1.0.2o.tar.gz...
-- Extracting source C:/Users/SJRJY/Downloads/websocket tools/vcpkg-master/downloads/openssl-1.0.2o.tar.gz
-- Applying patch C:/Users/SJRJY/Downloads/websocket tools/vcpkg-master/ports/openssl-windows/ConfigureIncludeQuotesFix.patch
-- Applying patch C:/Users/SJRJY/Downloads/websocket tools/vcpkg-master/ports/openssl-windows/STRINGIFYPatch.patch
-- Applying patch C:/Users/SJRJY/Downloads/websocket tools/vcpkg-master/ports/openssl-windows/EmbedSymbolsInStaticLibsZ7.patch
-- Downloading http://www.nasm.us/pub/nasm/releasebuilds/2.12.02/win32/nasm-2.12.02-win32.zip...
-- Downloading http://download.qt.io/official_releases/jom/jom_1_1_2.zip...
-- Configure x86-windows-rel
-- Configure x86-windows-rel done
-- Build x86-windows-rel
-- Build x86-windows-rel done
-- Configure x86-windows-dbg
-- Configure x86-windows-dbg done
-- Build x86-windows-dbg
-- Build x86-windows-dbg done
-- Installing: C:/Users/SJRJY/Downloads/websocket tools/vcpkg-master/packages/openssl-windows_x86-windows/share/openssl-windows/copyright
-- Performing post-build validation
-- Performing post-build validation done
Building package openssl-windows[core]:x86-windows... done
Installing package openssl-windows[core]:x86-windows...
Installing package openssl-windows[core]:x86-windows... done
Elapsed time for package openssl-windows:x86-windows: 13.46 min
Starting package 4/5: openssl:x86-windows
Building package openssl[core]:x86-windows...
-- Installing: C:/Users/SJRJY/Downloads/websocket tools/vcpkg-master/packages/openssl_x86-windows/share/openssl//usage
-- Performing post-build validation
-- Performing post-build validation done
Building package openssl[core]:x86-windows... done
Installing package openssl[core]:x86-windows...
Installing package openssl[core]:x86-windows... done
Elapsed time for package openssl:x86-windows: 4.96 s
Starting package 5/5: curl:x86-windows
Building package curl[core,ssl]:x86-windows...
-- Downloading https://github.com/curl/curl/archive/curl-7_61_0.tar.gz...
-- Extracting source C:/Users/SJRJY/Downloads/websocket tools/vcpkg-master/downloads/curl-curl-curl-7_61_0.tar.gz
-- Using source at C:/Users/SJRJY/Downloads/websocket tools/vcpkg-master/buildtrees/curl/src/url-7_61_0-4b20716921
-- Applying patch C:/Users/SJRJY/Downloads/websocket tools/vcpkg-master/ports/curl/0001_cmake.patch
-- Applying patch C:/Users/SJRJY/Downloads/websocket tools/vcpkg-master/ports/curl/0002_fix_uwp.patch
-- Applying patch C:/Users/SJRJY/Downloads/websocket tools/vcpkg-master/ports/curl/0003_fix_libraries.patch
-- Applying patch C:/Users/SJRJY/Downloads/websocket tools/vcpkg-master/ports/curl/0004_nghttp2_staticlib.patch
-- Configuring x86-windows
-- Building x86-windows-dbg
-- Building x86-windows-rel
-- Installing: C:/Users/SJRJY/Downloads/websocket tools/vcpkg-master/packages/curl_x86-windows/share/curl/copyright
-- Performing post-build validation
-- Performing post-build validation done
Building package curl[core,ssl]:x86-windows... done
Installing package curl[core,ssl]:x86-windows...
Installing package curl[core,ssl]:x86-windows... done
Elapsed time for package curl:x86-windows: 4.497 min

Total elapsed time: 35.08 min

The package sdl2:x86-windows provides CMake targets:

    find_package(SDL2 CONFIG REQUIRED)
    target_link_libraries(main PRIVATE SDL2::SDL2 SDL2::SDL2main)

The package curl is compatible with built-in CMake targets:

    find_package(CURL REQUIRED)
    target_link_libraries(main PRIVATE ${CURL_LIBRARIES})
    target_include_directories(main PRIVATE ${CURL_INCLUDE_DIRS})


********************************************************************************************





安装protobuf-cpp-3.6.1:
C++ Installation - Windows
If you only need the protoc binary, you can download it from the release page:

https://github.com/google/protobuf/releases/latest
In the downloads section, download the zip file protoc-$VERSION-win32.zip. It contains the protoc binary as well as public proto files of protobuf library.

Protobuf and its dependencies can be installed directly by using vcpkg:

>vcpkg install protobuf protobuf:x64-windows
If zlib support is desired, you'll also need to install the zlib feature:

>vcpkg install protobuf[zlib] protobuf[zlib]:x64-windows
See https://github.com/Microsoft/vcpkg for more information.

To build from source using Microsoft Visual C++, see cmake/README.md.

To build from source using Cygwin or MinGW, follow the Unix installation instructions, above.