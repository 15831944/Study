gcc编译命令
-E：仅作预处理，不进行编译、汇编或链接
-S:编译到汇编语言，不进行汇编和链接
-c：编译、汇编到目标代码，不进行链接
-o:输出到<文件>
-shared：生成一个共享库

用法：gcc [选项] 文件...
选项：
  -pass-exit-codes         在某一阶段退出时返回其中最高的错误码。
  --help                   显示此帮助说明。
  --target-help            显示目标机器特定的命令行选项。
  --help={common|optimizers|params|target|warnings|[^]{joined|separate|undocumented}}[,...]。
                           显示特定类型的命令行选项。
 （使用‘-v --help’显示子进程的命令行参数）。
  --version                显示编译器版本信息。
  -dumpspecs               显示所有内建 spec 字符串。
  -dumpversion             显示编译器的版本号。
  -dumpmachine             显示编译器的目标处理器。
  -print-search-dirs       显示编译器的搜索路径。
  -print-libgcc-file-name  显示编译器伴随库的名称。
  -print-file-name=<库>    显示 <库> 的完整路径。
  -print-prog-name=<程序>  显示编译器组件 <程序> 的完整路径。
  -print-multiarch         显示目标的标准 GNU 三元组（被用于库路径的一部分）。
  -print-multi-directory   显示不同版本 libgcc 的根目录。
  -print-multi-lib         显示命令行选项和多个版本库搜索路径间的映射。
  -print-multi-os-directory 显示操作系统库的相对路径。
  -print-sysroot           显示目标库目录。
  -print-sysroot-headers-suffix 显示用于寻找头文件的 sysroot 后缀。
  -Wa,<选项>               将逗号分隔的 <选项> 传递给汇编器。
  -Wp,<选项>               将逗号分隔的 <选项> 传递给预处理器。
  -Wl,<选项>               将逗号分隔的 <选项> 传递给链接器。
  -Xassembler <参数>       将 <参数> 传递给汇编器。
  -Xpreprocessor <参数>    将 <参数> 传递给预处理器。
  -Xlinker <参数>          将 <参数> 传递给链接器。
  -save-temps              不删除中间文件。
  -save-temps=<参数>       不删除中间文件。
  -no-canonical-prefixes   生成其他 gcc 组件的相对路径时不生成规范化的
                           前缀。
  -pipe                    使用管道代替临时文件。
  -time                    为每个子进程计时。
  -specs=<文件>            用 <文件> 的内容覆盖内建的 specs 文件。
  -std=<标准>              假定输入源文件遵循给定的标准。
  --sysroot=<目录>         将 <目录> 作为头文件和库文件的根目录。
  -B <目录>                将 <目录> 添加到编译器的搜索路径中。
  -v                       显示编译器调用的程序。
  -###                     与 -v 类似，但选项被引号括住，并且不执行命令。
  -E                       仅作预处理，不进行编译、汇编或链接。
  -S                       编译到汇编语言，不进行汇编和链接，
  -c                       编译、汇编到目标代码，不进行链接。
  -o <文件>                输出到 <文件>。
  -pie                     Create a dynamically linked position independent
                           executable.
  -shared                  生成一个共享库。
  -x <语言>                指定其后输入文件的语言。
                           允许的语言包括：c、c++、assembler、none
                           ‘none’意味着恢复默认行为，即根据文件的扩展名猜测
                           源文件的语言。

以 -g、-f、-m、-O、-W 或 --param 开头的选项将由 gcc 自动传递给其调用的
 不同子进程。若要向这些进程传递其他选项，必须使用 -W<字母> 选项。

报告程序缺陷的步骤请参见：
<https://gcc.gnu.org/bugs/>.
getNum.c
#define NUM 7
int getNum(int num)
{
  num += NUM;
  return num;
}
main.c
#include"stdio.h"
extern int getNum(int num);
int main()
{
  int get=3;
  get += getNum(get);
  printf("num=%d\n",get);
  return 0;
}
预编译幷输出预编译文件：getNum.i
gcc -o getNum.i -E getNum.c
gcc -E getNum.c:直接将经过预编译处理的文件打印到终端，而不会输出.i文件
getNum.i:
# 1 "getNum.c"
# 1 "<built-in>"
# 1 "<命令行>"
# 31 "<命令行>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 32 "<命令行>" 2
# 1 "getNum.c"

int getNum(int num)
{
	num +=7;
	return num;
}

生成汇编文件:getNum.s
gcc -o getNum.s -S getNum.c
或者：gcc -o getNum.s -S getNum.i
getNum.c:
      .file	"getNum.c"
      .text
      .globl	getNum
      .type	getNum, @function
getNum:
.LFB0:
      .cfi_startproc
      pushq	%rbp
      .cfi_def_cfa_offset 16
      .cfi_offset 6, -16
      movq	%rsp, %rbp
      .cfi_def_cfa_register 6
      movl	%edi, -4(%rbp)
      addl	$7, -4(%rbp)
      movl	-4(%rbp), %eax
      popq	%rbp
      .cfi_def_cfa 7, 8
      ret
      .cfi_endproc
.LFE0:
      .size	getNum, .-getNum
      .ident	"GCC: (GNU) 9.2.0"
      .section	.note.GNU-stack,"",@progbits

生成目标文件.obj:getNum.o
gcc -o getNum.o -c getNum.c
或：gcc -o getNum.o -c getNum.i
或：gcc -o getNum.o -c getNum.s
编译链接生成可执行文件:getNum.out
gcc -o getNum.out getNum.c
或：gcc -o getNum.out getNum.i
或：gcc -o getNum.out getNum.s
或：gcc -o getNum.out getNum.o



多个文件一起编译：
首先分别生成目标文件
gcc -c getNum.c main.c
生成：getNum.o,mian.o
编译生成可执行文件get.out
gcc -o get.out getNum.o main.o   (getNum.o和main.o的顺序前后没有影响)

将getNum.c生成动态链接库
gcc -shared -Wl,-soname,libgetNum.so -o getNum.so getNum.c
-shared参数，生成了动态链接库getNum.so，“-soname,libgetNum”，是getNum.so的别名

链接动态库编译：
1.动态库在当前目录下，直接编译
gcc -o get.out main.c getNum.so -ldl
2.动态库配置在系统路径，要指定动态库路径
gcc -o get.out main.c -L/sur/bin/ld/ -lgetNum.so
同样生成了get.out
